// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid()) @map("_id")
  name           String?
  email          String        @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           String?
  accounts       Account[]
  sessions       Session[]
  comments       BlogComments?
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    String
  title       String
  img         String
  imgURL      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  category    String
  title       String
  author      String
  img         String
  imgURL      String
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  blogComment BlogComments[]
}

model BlogComments {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  text   String
  user   User     @relation(fields: [userId], references: [email], onDelete: Cascade)
  userId String   @unique
  blog   Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String   @db.ObjectId
  like   Boolean?
}
